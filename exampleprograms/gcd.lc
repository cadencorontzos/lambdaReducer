***
GCD 
    calculates the Greatest common divisor of two numbers using the Y combinator and 
    Euclidian algorithm. Relies on minus and equal (see minus.lc, equal.lc)
***
succ        = fn n => fn f => fn x => f (n f x);
zero        = (fn f => fn x => x);
one         = succ zero;
two         = succ one;
three       = succ two;
four        = succ three;
five        = succ four;
ten         = succ (succ (succ (succ (succ five))));
true        = fn f => fn s => f;
false       = fn f => fn s => s;
pair        = fn l => fn r => fn s => s l r;
fst         = fn p => p true;
snd         = fn p => p false;
iszero      = fn n => n (fn x => false) true;
plus        = fn n => fn m => (n succ m);
iszero      = fn n => n (fn x => false) true;
isntzero    = fn n => n (fn x => true) false;
q0          = pair zero zero;
t           = fn p => pair (succ (fst p)) (fst p);
pred        = fn n => snd (n t q0);
minus       = fn n => fn m => (m pred) n;
and         = fn f => fn s => iszero (minus ((pair one two) f) ((pair one zero) s));
equal       = fn o => fn t => and (iszero (minus o t)) (iszero (minus t o));
less        = fn n => fn m => and (iszero (minus n m)) (isntzero (minus m n));
if          = fn i => fn t => fn e => (pair t e) i ;
Y           = fn g => (fn y => g (y y)) (fn y => g (y y));
gcdrec      = fn f => fn a => fn b => if (equal a b) (a) (if (less b a) (f (minus a b) b) (f a (minus b a)));
gcd         = Y gcdrec;
main        = gcdrec ten five;